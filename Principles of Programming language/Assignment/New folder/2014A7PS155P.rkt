#lang racket
(provide (all-defined-out))
(define inputFile (vector-ref (current-command-line-arguments) 0))
;(define inputFile "inputFile.txt")
(define wordlist (file->list inputFile))
(define step1 wordlist)
;(display step1)
(define (fun1 word cnt)
  (list cnt word null))
(define (makecl l count)
(if (null? l)
      '( )
      (cons (fun1 (list(car l)) count)(makecl (cdr l) (+ count 1)))
 ))
(define clusterList(makecl wordlist 1))
(define step2 clusterList)
;(display step2)
(define (wtoc wd)
(string->list wd))
;(first (wtoc(word))
(define (length l)
(if (null? l)
      0
      (+ 1 (length(cdr l)))
))

(define (union u v sum)
  (begin)
  (+ sum (length v))
  (+ sum (length u))
  ;(- sum (ints u v int))
)
